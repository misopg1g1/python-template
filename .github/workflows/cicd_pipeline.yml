name: CICD

on:
  push:
    branches:
      - production
      - staging

#env:
#  REGISTRY_USERNAME: ${{secrets.REGISTRY_USERNAME}}
#  REGISTRY_PASSWORD: ${{secrets.REGISTRY_PASSWORD}}
#
jobs:
#  test:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Set up Python 3.10
#        uses: actions/setup-python@v2
#        with:
#          python-version: "3.10"
#
#      - name: Update pip
#        run: |
#          python -m pip install --upgrade pip
#      - name: Verificar archivo requirements.txt
#        run: |
#          if [ ! -f requirements.txt ]; then
#            echo "requirements.txt no encontrado. No se ejecutará la acción."
#            exit 0
#          fi
#      - name: Install dependencies
#        run: |
#          python -m pip install -r requirements.txt
#
#      - name: Run tests
#        run: |
#          pytest
#  build:
#    needs: test
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - name: Verificar archivo Dockerfile
#        run: |
#          if [ ! -f Dockerfile ]; then
#            echo "Dockerfile no encontrado. No se ejecutará la acción."
#            exit 0
#          fi
#      - name: Log in to registry
#        run: |
#          docker login --username $REGISTRY_USERNAME --password $REGISTRY_PASSWORD misoregistry.edgarluna.dev
#
#      - name: Build and push Docker image
#
#        run: |
#          repo_name=$(basename $GITHUB_REPOSITORY)
#          branch_name=$(basename $GITHUB_REF)
#          image_version=$(date +%s)
#          docker build . --file Dockerfile --tag misoregistry.edgarluna.dev/images/${repo_name}_${branch_name}:${image_version} --tag misoregistry.edgarluna.dev/images/${repo_name}_${branch_name}:latest
#          docker push misoregistry.edgarluna.dev/images/${repo_name}_${branch_name}:${image_version}
#          docker push misoregistry.edgarluna.dev/images/${repo_name}_${branch_name}:latest

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Verificar archivo deployment.yaml
        run: |
          if [ ! -f deployment.yaml ]; then
            echo "deployment.yaml no encontrado. No se ejecutará la acción."
            exit 0
          fi
      - name: Crear config file
        run: |
          mkdir ${HOME}/.kube
          echo ${{ secrets.KUBECONFIG_BASE64 }} | base64 --decode > ${HOME}/.kube/config
          export KUBECONFIG=${HOME}/.kube/config
      - name: Establecer variables del deployment
        run: |
          export REPO_NAME=$(basename $GITHUB_REPOSITORY)
          export BRANCH_NAME=$(basename $GITHUB_REF)
          export REGISTRY_SPACE=${{ secrets.REGISTRY_SPACE }}
          export REGISTRY_HOST=${{ secrets.REGISTRY_HOST }}
      - name: Aplicar deployment.yaml
        uses: danielr1996/envsubst-action@1.0.0
        env:
          REPO_NAME: $(basename $GITHUB_REPOSITORY)
          BRANCH_NAME: $(basename $GITHUB_REF)
          REGISTRY_SPACE: ${{ secrets.REGISTRY_SPACE }}
          REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
        with:
          input: deployment.yaml
          output: new_deployment.yaml
        run: |
          kubectl apply -f new_deployment.yaml
      - name: Eliminar config file y new_deployment
        run: |
          rm -rf $HOME/.kube/config
          rm -rf new_deployment.yaml