name: CICD

on:
  push:
    branches:
      - production
      - staging

env:
  REGISTRY_USERNAME: ${{secrets.REGISTRY_USERNAME}}
  REGISTRY_PASSWORD: ${{secrets.REGISTRY_PASSWORD}}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configurar Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Actualizar pip
        run: |
          python -m pip install --upgrade pip
      - name: Verificar archivo requirements.txt
        run: |
          if [ ! -f requirements.txt ]; then
            echo "requirements.txt no encontrado. No se ejecutará la acción."
            exit 0
          fi
      - name: Instalar dependencias
        run: |
          python -m pip install -r requirements.txt

      - name: Correr tests
        run: |
          pytest
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verificar archivo Dockerfile
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Dockerfile no encontrado. No se ejecutará la acción."
            exit 0
          fi
      - name: Autenticarse en el registry
        run: |
          docker login --username $REGISTRY_USERNAME --password $REGISTRY_PASSWORD misoregistry.edgarluna.dev

      - name: Construir y Subir imagen de docker

        run: |
          repo_name=$(basename $GITHUB_REPOSITORY)
          branch_name=$(basename $GITHUB_REF)
          image_version=$(date +%s)
          docker build . --file Dockerfile --tag misoregistry.edgarluna.dev/images/${repo_name}-${branch_name}:${image_version} --tag misoregistry.edgarluna.dev/images/${repo_name}-${branch_name}:latest
          docker push misoregistry.edgarluna.dev/images/${repo_name}-${branch_name}:${image_version}
          docker push misoregistry.edgarluna.dev/images/${repo_name}-${branch_name}:latest
          echo "La imagen misoregistry.edgarluna.dev/images/${repo_name}-${branch_name}:${image_version} se construyo y se subió exitosamente"
          echo "La imagen misoregistry.edgarluna.dev/images/${repo_name}-${branch_name}:latest se construyo y se subió exitosamente"
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Verificar archivo deployment.yaml
        run: |
          if [ ! -f deployment.yaml ]; then
            echo "deployment.yaml no encontrado. No se ejecutará la acción."
            exit 0
          fi
      - name: Establecer variables del deployment
        env:
          REPO_NAME: ${{ github.event.repository.name }}
          REGISTRY_SPACE: ${{ secrets.REGISTRY_SPACE }}
          REGISTRY_HOST: ${{ secrets.REGISTRY_HOST }}
        run: |
          sed -e "s~\${REPO_NAME}~$REPO_NAME~g" \
          -e "s~\${BRANCH_NAME}~$(basename $GITHUB_REF)~g" \
          -e "s~\${REGISTRY_SPACE}~$REGISTRY_SPACE~g" \
          -e "s~\${REGISTRY_HOST}~$REGISTRY_HOST~g" \
          deployment.yaml > new_deployment.yaml
      - name: desplegar servicio
        uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.BASE64_KUBECONFIG }}
        with:
          args: apply -f new_deployment.yaml
      - name: Eliminar config file y new_deployment
        run: |
          echo "Se desplegaron la aplicación y el servicio en la rama $(basename $GITHUB_REF) de manera exitosa"
          rm -rf $HOME/.kube/config
          rm -rf new_deployment.yaml